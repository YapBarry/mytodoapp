[{"/Users/user/Desktop/my_todo_list/src/index.js":"1","/Users/user/Desktop/my_todo_list/src/App.js":"2"},{"size":254,"mtime":1666686989201,"results":"3","hashOfConfig":"4"},{"size":1427,"mtime":1666686989194,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14m3qji",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/Users/user/Desktop/my_todo_list/src/index.js",[],[],"/Users/user/Desktop/my_todo_list/src/App.js",["13"],[],"import {useState} from 'react';\n\n\nexport function App() {\n  const [list, setList] =useState([]);\n  const [input, setInput] = useState(\"\");\n\n  const addToDo = (toDo) => {\n    const newToDo = {\n      id: Math.random(),\n      toDo: toDo,\n      completed: false\n    };\n\n    // add the todo to existing list\n    setList([...list, newToDo]);\n\n    // clear input box\n    setInput(\"\");\n\n  };\n\n  const deleteToDo = (id) => {\n    const newList = list.filter(toDo => toDo.id !== id);\n    setList(newList);\n  }\n\n  // to apply strikethrough formatting to toDo if completed = true\n  const handleToggle = (id) => {\n    let mapped = list.map(toDo => toDo.id == id ? { ...toDo, completed: !toDo.completed } : { ...toDo});\n    setList(mapped);\n    console.log(mapped);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>To Do List</h1>\n      <input \n      type=\"text\"\n      onChange={(e) => setInput(e.target.value)}\n      value={input}\n      ></input>\n      <button onClick={() => addToDo(input)}>Add To Do</button>\n      <ul>\n        {list.map((toDo) => (\n          <div key={toDo.id} className={toDo.completed ? \"strike\" : \"\"}>\n            <input value={toDo.toDo} type=\"checkbox\" onClick={() => handleToggle(toDo.id)}/>\n            <span>{toDo.toDo}</span>\n            <button onClick={() => deleteToDo(toDo.id)}>&times;</button>  \n            <hr></hr>     \n          </div>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"14","severity":1,"message":"15","line":30,"column":43,"nodeType":"16","messageId":"17","endLine":30,"endColumn":45},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]