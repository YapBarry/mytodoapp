[{"/Users/user/Desktop/my_todo_list/src/index.js":"1","/Users/user/Desktop/my_todo_list/src/App.js":"2","/Users/user/Desktop/my_todo_list/src/firebase.js":"3"},{"size":254,"mtime":1666686989201,"results":"4","hashOfConfig":"5"},{"size":2528,"mtime":1667205035648,"results":"6","hashOfConfig":"5"},{"size":610,"mtime":1666746069842,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"14m3qji",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"/Users/user/Desktop/my_todo_list/src/index.js",[],[],[],"/Users/user/Desktop/my_todo_list/src/App.js",["19","20"],[],"import {useState, useEffect} from 'react';\nimport { db } from \"./firebase\";\nimport { collection, addDoc } from \"firebase/firestore\";\n\nimport { query, onSnapshot, doc, updateDoc, deleteDoc, where } from \"firebase/firestore\";\n\nexport function App() {\n  const [list, setList] =useState([]);\n  const [input, setInput] = useState(\"\");\n  \n  \n  useEffect(() => {\n    const collectionRef = collection(db, 'todo');\n    const q = query(collectionRef); //where clause if necessary\n    const unsub = onSnapshot(q, (querySnapshot) => {\n      let todoArray = [];\n      querySnapshot.forEach((doc) => {\n        todoArray.push({...doc.data(), id: doc.id});\n      });\n      setList(todoArray);\n    });\n    return () => unsub();\n  }, []);\n\n  const addToDo = async (toDo) => {\n    if (input !== \"\") {\n      const newToDo = {\n        toDo: toDo,\n        completed: false\n      };\n\n      await addDoc(collection(db, 'todo'), newToDo);\n\n      // // add the todo to existing list (for non database method)\n      // setList([...list, newToDo]);\n\n      // clear input box\n      setInput(\"\");\n    }\n  };\n\n  // const deleteToDo = (id) => {\n  //   const newList = list.filter(toDo => toDo.id !== id);\n  //   setList(newList);\n  // }\n\n  // // to apply strikethrough formatting to toDo if completed = true\n  // const handleToggle = (id) => {\n  //   let mapped = list.map(toDo => toDo.id == id ? { ...toDo, completed: !toDo.completed } : { ...toDo});\n  //   setList(mapped);\n  //   console.log(mapped);\n  // };\n\n  const handleEdit = async (todo, list) => { \n    await updateDoc(doc(db, 'todo', todo.id), {toDo: list});\n  };\n  const toggleComplete = async (todo) => {\n    await updateDoc(doc(db, 'todo', todo.id), { \n      completed: !todo.completed\n    });\n  };\n  const handleDelete = async (id) => {\n    await deleteDoc(doc(db, 'todo', id));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>To Do List</h1>\n      <input \n      type=\"text\"\n      onChange={(e) => setInput(e.target.value)}\n      value={input}\n      ></input>\n      <button onClick={() => addToDo(input)}>Add To Do</button>\n      <ul>\n        {list.map((toDo) => (\n          <div key={toDo.id} className={toDo.completed ? \"strike\" : \"\"}>\n            <input \n            value={toDo.toDo} \n            type=\"checkbox\" \n            onClick={() => toggleComplete(toDo)}/>\n            <span>{toDo.toDo}</span>\n            <button onClick={() => handleDelete(toDo.id)}>&times;</button>  \n            <hr></hr>     \n          </div>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/user/Desktop/my_todo_list/src/firebase.js",[],[],{"ruleId":"21","severity":1,"message":"22","line":5,"column":56,"nodeType":"23","messageId":"24","endLine":5,"endColumn":61},{"ruleId":"21","severity":1,"message":"25","line":54,"column":9,"nodeType":"23","messageId":"24","endLine":54,"endColumn":19},"no-unused-vars","'where' is defined but never used.","Identifier","unusedVar","'handleEdit' is assigned a value but never used."]